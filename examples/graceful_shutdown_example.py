#!/usr/bin/env python3
"""
Graceful Shutdown Example –¥–ª—è aiows

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å graceful shutdown –º–µ—Ö–∞–Ω–∏–∑–º
–≤ aiows WebSocket —Å–µ—Ä–≤–µ—Ä–µ.

–î–ª—è –∑–∞–ø—É—Å–∫–∞:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python examples/graceful_shutdown_example.py
2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å WebSocket –∫–ª–∏–µ–Ω—Ç–æ–º –∫ ws://localhost:8000
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ Ctrl+C –∏–ª–∏ SIGTERM –¥–ª—è graceful shutdown
4. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

Features:
- Signal handlers –¥–ª—è SIGTERM –∏ SIGINT
- Graceful –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π 
- Timeout –¥–ª—è shutdown –ø—Ä–æ—Ü–µ—Å—Å–∞
- Programmatic shutdown API
- Proper cleanup —Ä–µ—Å—É—Ä—Å–æ–≤
"""

import asyncio
import logging
import signal
import time
from aiows import WebSocketServer, Router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
connections_stats = {
    'total_connected': 0,
    'currently_connected': 0,
    'active_connections': set()
}

@router.on_connect
async def handle_connect(ws):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    connections_stats['total_connected'] += 1
    connections_stats['currently_connected'] += 1
    connections_stats['active_connections'].add(ws)
    
    logger.info(f"–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ! –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {connections_stats['currently_connected']}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ws.send_json({
        "type": "welcome",
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç graceful shutdown.",
        "connection_id": connections_stats['total_connected'],
        "server_info": {
            "shutdown_timeout": server._shutdown_timeout,
            "supports_graceful_shutdown": True
        }
    })

@router.on_disconnect
async def handle_disconnect(ws, reason):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    if ws in connections_stats['active_connections']:
        connections_stats['active_connections'].remove(ws)
        connections_stats['currently_connected'] -= 1
    
    logger.info(f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è (–ø—Ä–∏—á–∏–Ω–∞: {reason}). –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {connections_stats['currently_connected']}")

@router.message("ping")
async def handle_ping(ws, message_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ping —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await ws.send_json({
        "type": "pong",
        "timestamp": time.time(),
        "server_status": "running" if not server.is_shutting_down else "shutting_down"
    })

@router.message("echo")
async def handle_echo(ws, message_data):
    """–≠—Ö–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É"""
    await ws.send_json({
        "type": "echo_response",
        "original_message": message_data,
        "timestamp": time.time()
    })

@router.message("status")
async def handle_status(ws, message_data):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    await ws.send_json({
        "type": "server_status",
        "connections": {
            "total_connected": connections_stats['total_connected'],
            "currently_connected": connections_stats['currently_connected']
        },
        "server": {
            "is_shutting_down": server.is_shutting_down,
            "shutdown_timeout": server._shutdown_timeout
        },
        "timestamp": time.time()
    })

@router.message("shutdown")
async def handle_shutdown_request(ws, message_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ shutdown (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)"""
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ programmatic shutdown –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–∞—á–∞–ª–µ shutdown
    await ws.send_json({
        "type": "shutdown_initiated",
        "message": "–°–µ—Ä–≤–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç graceful shutdown...",
        "timestamp": time.time()
    })
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º shutdown –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(shutdown_server_gracefully())

async def shutdown_server_gracefully():
    """Graceful shutdown —Å–µ—Ä–≤–µ—Ä–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è programmatic shutdown —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
    await asyncio.sleep(2)  # –î–∞—ë–º –≤—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
    await server.shutdown(timeout=10.0)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
server = WebSocketServer()
server.include_router(router)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
server.set_shutdown_timeout(15.0)  # 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ graceful shutdown

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("=" * 60)
    print("üöÄ Graceful Shutdown Example –¥–ª—è aiows")
    print("=" * 60)
    print("üì° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ ws://localhost:8000")
    print("üîß Graceful shutdown timeout: 15 —Å–µ–∫—É–Ω–¥")
    print("=" * 60)
    print("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("  üí¨ ping    - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏")
    print("  üîÑ echo    - —ç—Ö–æ —Å–æ–æ–±—â–µ–Ω–∏—è") 
    print("  üìä status  - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")
    print("  üõë shutdown - programmatic shutdown")
    print("=" * 60)
    print("–î–ª—è graceful shutdown:")
    print("  üî¥ –ù–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("  üî¥ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É")
    print("  üî¥ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 'shutdown'")
    print("=" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
        server.run(host="localhost", port=8000)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    main() 